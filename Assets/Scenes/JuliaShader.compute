// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4 qmul(float4 q1, float4 q2)
{
    return float4(q1.x * q2.x - q1.y * q2.y - q1.z * q2.z - q1.w * q2.w,
                  q1.x * q2.y + q1.y * q2.x + q1.z * q2.w - q1.w * q2.z,
                  q1.x * q2.z - q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,
                  q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x);
}
float4 qconj(float4 q)
{
    return float4(q.x, -q.yzw);
}

float3 cross(float3 a, float3 b)
{
    return float3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
}


float4 C;

float3 CameraPosition;
float3 CameraForward;
float3 CameraUp;
int Width;
int Height;
float3 SunPosition;
float SunRadius; // fake

float SDF(float3 position)
{
    float3 ballPos = float3(0, 0, 0);
    return length(position - ballPos) - 0.5;
}

float Julia_SDF(float3 position)
{
    int maxIterations = 100;
    float4 z_n = float4(position, 0);
    float4 d_z_n = 1; // Derivative of z_n
    float z_n_squared = dot(z_n, z_n);
    for (int i = 0; i <maxIterations; i++)
    {
        d_z_n *= 4 * z_n_squared;
        z_n = qmul(z_n,z_n) + C;
        z_n_squared = dot(z_n, z_n);
        if (z_n_squared > 1e15)
        {
            break;
        }

    }
    return sqrt(z_n_squared / d_z_n) * log(z_n_squared) * 0.5;
}

float3 Julia_Normal(float3 position)
{
    float4 z = float4(position, 0);

    float4 J0 = float4(1, 0, 0, 0);
    float4 J1 = float4(0, 1, 0, 0);
    float4 J2 = float4(0, 0, 1, 0);

    int numIterations = 100;
    float4 cz;
    for (int i = 0; i < numIterations; i++)
    {
        cz = qconj(z);

        J0 = float4( dot(J0,cz), dot(J0.xy,z.yx), dot(J0.xz,z.zx), dot(J0.xw,z.wx) );
        J1 = float4( dot(J1,cz), dot(J1.xy,z.yx), dot(J1.xz,z.zx), dot(J1.xw,z.wx) );
        J2 = float4( dot(J2,cz), dot(J2.xy,z.yx), dot(J2.xz,z.zx), dot(J2.xw,z.wx) );

        z = qmul(z, z) + C;

        if (dot(z,z) > 4) break;

    }

    return normalize(float3(dot(J0, z), dot(J1, z), dot(J2, z)));
}

float3 Cut_Julia_Normal(float3 position)
{
    if (position.y > -0.01)
    {
        return float3(0, 1, 0);
    }
    return Julia_Normal(position);
}

float SDF_Plane(float3 position)
{
    return position.y;
}

float Julia_cut(float3 position)
{
    return max(Julia_SDF(position), SDF_Plane(position));
}

float4 raymarch(float3 position, float3 direction) // last parameter is the number of steps
{
    float3 orgPos = position;
    int maxSteps = 100;
    float minDistance = 0.001;
    float maxDistance = 20.0;
    float dist = Julia_SDF(position);
    int numSteps = 0;
    for (int i = 0; i < maxSteps; i++)
    {
     
        position += dist * direction * 0.5;
        dist = Julia_SDF(position);

        if (dist < minDistance || dist > maxDistance)
        {
            numSteps = i;
            break;
        }
    }
    if (dist <= minDistance)
    {
        return float4(position, float(numSteps)/float(maxSteps));
        /*if (position.y > -0.01)
        {
            return float4(1,1,1,1) * 0.5;
        }
        return float4(abs(position), 1);*/
        //return length(orgPos -position) / 4;
    }

    

    return float4(0,0,0,float(numSteps)/float(maxSteps));
}
float3 rayDirection(float2 id)
{
    CameraForward = normalize(CameraForward);
    CameraUp = normalize(CameraUp);
    float3 right = normalize(cross(CameraForward, CameraUp));
    float3 up = normalize(cross(right, CameraForward));
    if (Width == 0 || Height == 0)
    {
        return float3(0, 0, 0);
    }
    float aspectRatio = Width / Height;
    float3 rayDirection = normalize(CameraForward + ((id.x / Width - 0.5) * 0.5) * right * aspectRatio + (id.y / Height - 0.5) * 0.5 * up);
    return rayDirection;
}

float4 render(float3 position, float2 id)
{
    float3 P = position;
    float4 sunColor = float4(1,1,1,1);
    float4 result = float4(0, 0, 0, 1);
    int AA = 1;
    for (int i = 0; i < AA; i++)
    {
        for (int j = 0; j < AA; j++)
        {
            float3 direction = rayDirection(id + float2(i, j) / AA);
            float4 raymarch_res = raymarch(position, direction);
            position = raymarch_res.xyz;

            // check if the direction intersects the sun
            float t = -(dot(direction, P)) + dot(direction, SunPosition);
            float closestsPos = P + t * direction;
            float dist = length(SunPosition - closestsPos);
            bool hitSun = false;
            if (dist <= SunRadius){
                hitSun = true;
                // temp
                result += sunColor;
                continue;
            }

            
            if (position.x == 0 && position.y == 0 && position.z == 0)
            {
                if (hitSun){
                    result += sunColor;
                    continue;
                }
                // skyqqqs
                result += float4(raymarch_res.w, raymarch_res.w, raymarch_res.w, 1);
                continue;
            }
            if (position.x == 1 && position.y == 0 && position.z == 0)
            {
                // sky
                if (hitSun){
                    result += sunColor;
                    continue;
                }
                result += float4(1, 0, 0, 1);
                continue;
            }
            float3 normal = Julia_Normal(position);
            float3 lightDirection = normalize(SunPosition - position);
            float lightIntensity = max(0.3, dot(normal, lightDirection));

            if (hitSun){
            if(length(P - closestsPos) < length(P - position)){
                result += sunColor;
                continue;
            }}

            // TODO shadow
            float3 sun_to_point = normalize(position - SunPosition);
            float3 shadow_res = raymarch(SunPosition, sun_to_point);
            if(length(shadow_res - position) < 0.1) {
            result += float4(lightIntensity * 1.2, lightIntensity * 1.2, lightIntensity * 0.3, 1);

            }
            else{
                result += float4(lightIntensity * 0.8, lightIntensity, lightIntensity * 0.4, 1) * 0.5;
            }
        }
    }
    return result / (AA * AA);
}




[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] =  render(CameraPosition, id);
}
